[tool.poetry]
name = "django-v4"
version = "0.1.0"
description = "學習 Poetry 在 Django 專案之操作用法"
authors = ["Alan Jui <alanjui.1960@gmail.com>"]
readme = "README.md"
packages = [{include = "django-v4"}]

[tool.poetry.dependencies]
python = "^3.10"
django = "4.1.3"
pylint-django = "2.5.3"
asgiref = "3.5.2"
astroid = "2.12.12"
autopep8 = "2.0.0"
black = "22.10.0"
click = "8.1.3"
colorama = "0.4.6"
cssbeautifier = "1.14.7"
dill = "0.3.6"
django-stubs = "1.13.0"
django-stubs-ext = "0.7.0"
djhtml = "1.5.2"
djlint = "1.19.7"
editorconfig = "0.12.3"
flake8 = "5.0.4"
greenlet = "2.0.1"
html-tag-names = "0.1.2"
html-void-elements = "0.1.0"
importlib-metadata = "5.0.0"
isort = "5.10.1"
jsbeautifier = "1.14.7"
lazy-object-proxy = "1.8.0"
mccabe = "0.7.0"
msgpack = "1.0.4"
mypy = "0.990"
mypy-extensions = "0.4.3"
pathspec = "0.10.1"
platformdirs = "2.5.3"
pycodestyle = "2.9.1"
pyflakes = "2.5.0"
pylint-plugin-utils = "0.7"
pynvim = "0.4.3"
pyyaml = "6.0"
regex = "2022.10.31"
six = "1.16.0"
sqlparse = "0.4.3"
tomli = "2.0.1"
tomlkit = "0.11.6"
tqdm = "4.64.1"
types-pytz = "2022.6.0.1"
types-pyyaml = "6.0.12.2"
typing-extensions = "4.4.0"
wrapt = "1.14.1"
zipp = "3.10.0"
certifi = "2022.9.24"
distlib = "0.3.6"
django-types = "0.16.0"
filelock = "3.8.0"
pipenv = "2022.11.5"
virtualenv = "20.16.6"
virtualenv-clone = "0.5.7"
pylint = "^2.15.5"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pyright]
pythonPlatform = "Darwin"
pythonVersion = "3.10"
venv = "django-4.0"
venvPath = "/Users/alanjui/.pyenv/versions"

sexclude = [
    "**/node_modules",
    "**/__pycache__"
]
reportGeneralTypeIssues = "warning"
reportMissingImports = true
reportMissingTypeStubs = "warning"
reportOptionalMemberAccess = false
reportUnusedFunction = false
reportUnusedImport = true
reportUnusedVariable = false
stubPath = "typings"
typeCheckingMode = "basic"
typeshedPaths = []
useLibraryCodeForTypes = true


# --------------------------------------------------------------- PYLINT
# Pylint code checker configuration.
# - Pylint docs:
#   https://pylint.readthedocs.io/en/latest/
# - Configuration reference:
#   http://pylint.pycqa.org/en/latest/technical_reference/features.html
[tool.pylint.MASTER]
# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook="import sys; import os; from pylint.config import find_pylintrc; sys.path.append(os.path.dirname(find_pylintrc()))"
# Work in parallel.
# Parallel work disabled due to a bug in the pylint-django:
# https://github.com/PyCQA/pylint-django/issues/276
#jobs = "0"
jobs = "1"
load-plugins = "pylint_django"
# django-settings-module = "mysite.settings"

# Do not store results of previous runs.
persistent = "no"
# Allow to load C extension modules.
unsafe-load-any-extension = "yes"
[tool.pylint."MESSAGES CONTROL"]
# bad-continuation: Black does the job, no need to check.
# design: Do not count lines, members, ..., no use.
# similarities: Duplication does not mean bad design by itself.
disable = "bad-continuation,design,similarities"
enable = "c-extension-no-member"
[tool.pylint.BASIC]
# It is OK to have 2-letters identifiers, e.g. 'id' or 'ok'. Also allow
# long identifiers, cause there is a strong line length limitation which
# will force engineers to thing twice before giving too long names.
argument-rgx = "[a-z_][a-z0-9_]{1,64}$"
attr-rgx = "[a-z_][a-z0-9_]{1,64}$"
bad-names = "foo,bar,baz,toto,tutu,tata,responce,pathes"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{1,64}|(__.*__))$"
function-rgx = "[a-z_][a-z0-9_]{1,64}$"
good-names = "i,j,k,ex,Run,_"
method-rgx = "[a-z_][a-z0-9_]{1,64}$"
# Docstrings are needed everywhere.
no-docstring-rgx = "^$"
variable-rgx = "[a-z_][a-z0-9_]{1,64}$"
[tool.pylint.FORMAT]
max-line-length="88"
max-module-lines="9000" # Right, over nine thousand!
[tool.pylint.STRING_QUOTES]
docstring-quote = "double"
string-quote = "double-avoid-escape"
triple-quote = "double"
[tool.pylint.PYLINT_DJANGO]
# NOTE: When Pytest runs Pylint this setting is overwritten by the
# environment variable `DJANGO_SETTINGS_MODULE` set by `pytest-django`.
# Anyway, the setting is still useful when VS Code runs Pylint directly.
django-settings-module = "mysite.settings"
[tool.pylint.REFACTORING]
# We have line length 88, no need to check.
max-nested-blocks = "9000"
[tool.pylint.REPORTS]
reports = "no"
score = "no"


# --------------------------------------------------------------- MyPy
# Global options:

[tool.mypy]
plugins = ["django-stubs"]
no_implicit_optional = true
# pretty = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_unused_configs = true
# show_traceback = true
# show_error_codes = true
# strict_optional = true
# strict_equality = true
# check_untyped_defs = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# warn_no_return = true

# [[tool.mypy.overrides]]
# module = "tests.*"
# warn_no_return = false
